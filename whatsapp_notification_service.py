"""
üì± WHATSAPP NOTIFICATION SERVICE
=================================
Servicio centralizado para enviar notificaciones de WhatsApp seg√∫n el modo configurado.

Modos soportados:
- WhatsApp API: Para conversaciones completas y notificaciones
- WhatsApp Web: SOLO para notificaciones autom√°ticas (no gestiona conversaciones)
"""

import logging
import os
from typing import Dict, Optional, Tuple
from whatsapp_config_manager import get_tenant_whatsapp_config
from whatsapp_business_api_manager import WhatsAppBusinessAPIManager

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WhatsAppNotificationService:
    """
    Servicio para enviar notificaciones de WhatsApp
    Determina autom√°ticamente qu√© modo usar seg√∫n la configuraci√≥n del tenant
    """
    
    def __init__(self):
        self.api_manager = WhatsAppBusinessAPIManager()
    
    def get_active_mode(self, tenant_id: int) -> Optional[str]:
        """
        Obtiene el modo activo de WhatsApp para un tenant
        
        Returns:
            'business_api', 'whatsapp_web' o None si no hay configuraci√≥n
        """
        try:
            config = get_tenant_whatsapp_config(tenant_id)
            if not config:
                logger.warning(f"‚ö†Ô∏è No hay configuraci√≥n de WhatsApp para tenant {tenant_id}")
                return None
            
            # Si config es un dict con m√∫ltiples tipos, buscar el activo
            if isinstance(config, dict):
                for api_type, cfg in config.items():
                    if cfg and cfg.get('is_active'):
                        return api_type
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Error obteniendo modo activo tenant {tenant_id}: {str(e)}")
            return None
    
    def send_application_notification(self, tenant_id: int, phone: str, candidate_name: str, 
                                     vacancy_title: str, city: str, salary: str, requirements: str) -> Tuple[bool, str]:
        """
        Enviar notificaci√≥n de postulaci√≥n
        Funciona con: WhatsApp API y WhatsApp Web
        
        Args:
            tenant_id: ID del tenant
            phone: Tel√©fono del candidato
            candidate_name: Nombre del candidato
            vacancy_title: Cargo solicitado
            city: Ciudad
            salary: Salario
            requirements: Requisitos
        
        Returns:
            Tuple[success, message]
        """
        try:
            mode = self.get_active_mode(tenant_id)
            
            if not mode:
                logger.info(f"‚ÑπÔ∏è No hay WhatsApp configurado para tenant {tenant_id}")
                return False, "No hay configuraci√≥n de WhatsApp activa"
            
            # Preparar mensaje
            first_name = candidate_name.split(' ')[0]
            message = (
                f"¬°Hola {first_name}! Te saluda Henmir. üëã\n\n"
                f"Hemos considerado tu perfil para una nueva oportunidad laboral y te hemos postulado a la siguiente vacante:\n\n"
                f"üìå *Puesto:* {vacancy_title}\n"
                f"üìç *Ubicaci√≥n:* {city}\n"
                f"üí∞ *Salario:* {salary}\n\n"
                f"*Requisitos principales:*\n{requirements}\n\n"
                "Por favor, confirma si est√°s interesado/a en continuar con este proceso. ¬°Mucho √©xito!"
            )
            
            return self._send_message(tenant_id, mode, phone, message, 'application')
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando notificaci√≥n de postulaci√≥n: {str(e)}")
            return False, f"Error: {str(e)}"
    
    def send_interview_notification(self, tenant_id: int, phone: str, candidate_name: str,
                                   vacancy_title: str, company: str, interview_date: str, 
                                   interviewer: str, notes: str = "") -> Tuple[bool, str]:
        """
        Enviar notificaci√≥n de entrevista programada
        Funciona con: WhatsApp API y WhatsApp Web
        
        Args:
            tenant_id: ID del tenant
            phone: Tel√©fono del candidato
            candidate_name: Nombre del candidato
            vacancy_title: Cargo solicitado
            company: Empresa
            interview_date: Fecha formateada de la entrevista
            interviewer: Entrevistador
            notes: Notas adicionales
        
        Returns:
            Tuple[success, message]
        """
        try:
            mode = self.get_active_mode(tenant_id)
            
            if not mode:
                logger.info(f"‚ÑπÔ∏è No hay WhatsApp configurado para tenant {tenant_id}")
                return False, "No hay configuraci√≥n de WhatsApp activa"
            
            # Preparar mensaje
            first_name = candidate_name.split(' ')[0]
            message = (
                f"¬°Buenas noticias, {first_name}! üéâ\n\n"
                f"Hemos agendado tu entrevista para la vacante de *{vacancy_title}* en la empresa *{company}*.\n\n"
                f"üóìÔ∏è *Fecha y Hora:* {interview_date}\n"
                f"üë§ *Entrevistador(a):* {interviewer}\n\n"
            )
            
            if notes:
                message += f"*Detalles adicionales:*\n{notes}\n\n"
            
            message += "Por favor, s√© puntual. ¬°Te deseamos mucho √©xito en tu entrevista!"
            
            return self._send_message(tenant_id, mode, phone, message, 'interview')
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando notificaci√≥n de entrevista: {str(e)}")
            return False, f"Error: {str(e)}"
    
    def send_hired_notification(self, tenant_id: int, phone: str, candidate_name: str,
                               vacancy_title: str, company: str) -> Tuple[bool, str]:
        """
        Enviar notificaci√≥n de contrataci√≥n
        Funciona con: WhatsApp API y WhatsApp Web
        
        Args:
            tenant_id: ID del tenant
            phone: Tel√©fono del candidato
            candidate_name: Nombre del candidato
            vacancy_title: Cargo solicitado
            company: Empresa
        
        Returns:
            Tuple[success, message]
        """
        try:
            mode = self.get_active_mode(tenant_id)
            
            if not mode:
                logger.info(f"‚ÑπÔ∏è No hay WhatsApp configurado para tenant {tenant_id}")
                return False, "No hay configuraci√≥n de WhatsApp activa"
            
            # Preparar mensaje
            first_name = candidate_name.split(' ')[0]
            message = (
                f"¬°FELICIDADES, {first_name}! ü•≥\n\n"
                f"Nos complace enormemente informarte que has sido **CONTRATADO/A** para el puesto de *{vacancy_title}* en la empresa *{company}*.\n\n"
                "Este es un gran logro y el resultado de tu excelente desempe√±o en el proceso de selecci√≥n. "
                "En breve, el equipo de recursos humanos de la empresa se pondr√° en contacto contigo para coordinar los siguientes pasos.\n\n"
                "De parte de todo el equipo de Henmir, ¬°te deseamos el mayor de los √©xitos en tu nuevo rol!"
            )
            
            return self._send_message(tenant_id, mode, phone, message, 'hired')
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando notificaci√≥n de contrataci√≥n: {str(e)}")
            return False, f"Error: {str(e)}"
    
    def send_status_change_notification(self, tenant_id: int, phone: str, candidate_name: str,
                                       vacancy_title: str, new_status: str) -> Tuple[bool, str]:
        """
        Enviar notificaci√≥n de cambio de estado
        Funciona con: WhatsApp API y WhatsApp Web
        
        Args:
            tenant_id: ID del tenant
            phone: Tel√©fono del candidato
            candidate_name: Nombre del candidato
            vacancy_title: Cargo solicitado
            new_status: Nuevo estado
        
        Returns:
            Tuple[success, message]
        """
        try:
            mode = self.get_active_mode(tenant_id)
            
            if not mode:
                logger.info(f"‚ÑπÔ∏è No hay WhatsApp configurado para tenant {tenant_id}")
                return False, "No hay configuraci√≥n de WhatsApp activa"
            
            # Preparar mensaje seg√∫n el estado
            first_name = candidate_name.split(' ')[0]
            
            status_messages = {
                'En Revisi√≥n': f"Hola {first_name}, tu postulaci√≥n para {vacancy_title} est√° siendo revisada por nuestro equipo. Te mantendremos informado.",
                'Preseleccionado': f"¬°Buenas noticias {first_name}! Has sido preseleccionado para {vacancy_title}. Pronto te contactaremos.",
                'Rechazado': f"Hola {first_name}, lamentamos informarte que en esta ocasi√≥n no continuar√°s en el proceso para {vacancy_title}. Te invitamos a postularte a otras oportunidades."
            }
            
            message = status_messages.get(new_status, 
                f"Hola {first_name}, el estado de tu postulaci√≥n para {vacancy_title} ha sido actualizado a: {new_status}")
            
            return self._send_message(tenant_id, mode, phone, message, 'status_change')
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando notificaci√≥n de cambio de estado: {str(e)}")
            return False, f"Error: {str(e)}"
    
    def send_bot_campaign_message(self, tenant_id: int, phone: str, message: str) -> Tuple[bool, str]:
        """
        Enviar mensaje de campa√±a preparado por el bot
        Funciona con: WhatsApp API y WhatsApp Web
        
        Args:
            tenant_id: ID del tenant
            phone: Tel√©fono destino
            message: Mensaje preparado
        
        Returns:
            Tuple[success, message]
        """
        try:
            mode = self.get_active_mode(tenant_id)
            
            if not mode:
                logger.info(f"‚ÑπÔ∏è No hay WhatsApp configurado para tenant {tenant_id}")
                return False, "No hay configuraci√≥n de WhatsApp activa"
            
            return self._send_message(tenant_id, mode, phone, message, 'campaign')
            
        except Exception as e:
            logger.error(f"‚ùå Error enviando mensaje de campa√±a: {str(e)}")
            return False, f"Error: {str(e)}"
    
    def _send_message(self, tenant_id: int, mode: str, phone: str, message: str, 
                     notification_type: str) -> Tuple[bool, str]:
        """
        Enviar mensaje usando el modo configurado
        
        Args:
            tenant_id: ID del tenant
            mode: 'business_api' o 'whatsapp_web'
            phone: Tel√©fono destino
            message: Mensaje a enviar
            notification_type: Tipo de notificaci√≥n
        
        Returns:
            Tuple[success, message]
        """
        try:
            if mode == 'business_api':
                # Usar WhatsApp Business API
                result = self.api_manager.send_text_message(tenant_id, phone, message)
                
                if result.get('status') == 'success':
                    logger.info(f"‚úÖ Mensaje enviado via API - Tipo: {notification_type} - Tel√©fono: {phone}")
                    return True, "Mensaje enviado exitosamente via WhatsApp API"
                else:
                    error = result.get('error', 'Error desconocido')
                    logger.error(f"‚ùå Error enviando via API: {error}")
                    return False, f"Error: {error}"
            
            elif mode == 'whatsapp_web':
                # Usar WhatsApp Web solo para notificaciones
                # Importar din√°micamente para evitar dependencias circulares
                from whatsapp_web_manager import send_notification_web
                
                success = send_notification_web(tenant_id, phone, message)
                
                if success:
                    logger.info(f"‚úÖ Notificaci√≥n enviada via Web - Tipo: {notification_type} - Tel√©fono: {phone}")
                    return True, "Notificaci√≥n enviada exitosamente via WhatsApp Web"
                else:
                    logger.error(f"‚ùå Error enviando via Web")
                    return False, "Error enviando notificaci√≥n via WhatsApp Web"
            
            else:
                logger.error(f"‚ùå Modo desconocido: {mode}")
                return False, f"Modo de WhatsApp desconocido: {mode}"
                
        except Exception as e:
            logger.error(f"‚ùå Error enviando mensaje: {str(e)}")
            return False, f"Error enviando mensaje: {str(e)}"
    
    def can_use_for_conversations(self, tenant_id: int) -> bool:
        """
        Verifica si el tenant puede usar WhatsApp para conversaciones
        Solo WhatsApp API soporta conversaciones completas
        
        Args:
            tenant_id: ID del tenant
        
        Returns:
            True si puede gestionar conversaciones, False si no
        """
        try:
            mode = self.get_active_mode(tenant_id)
            
            # Solo WhatsApp API soporta conversaciones
            return mode == 'business_api'
            
        except Exception as e:
            logger.error(f"‚ùå Error verificando capacidad de conversaciones: {str(e)}")
            return False


# =====================================================
# INSTANCIA GLOBAL
# =====================================================

# Instancia global del servicio de notificaciones
notification_service = WhatsAppNotificationService()


# =====================================================
# FUNCIONES DE UTILIDAD
# =====================================================

def send_application_notification(tenant_id: int, phone: str, candidate_name: str, 
                                 vacancy_title: str, city: str, salary: str, requirements: str) -> Tuple[bool, str]:
    """
    Enviar notificaci√≥n de postulaci√≥n
    """
    return notification_service.send_application_notification(
        tenant_id, phone, candidate_name, vacancy_title, city, salary, requirements
    )

def send_interview_notification(tenant_id: int, phone: str, candidate_name: str,
                               vacancy_title: str, company: str, interview_date: str, 
                               interviewer: str, notes: str = "") -> Tuple[bool, str]:
    """
    Enviar notificaci√≥n de entrevista
    """
    return notification_service.send_interview_notification(
        tenant_id, phone, candidate_name, vacancy_title, company, interview_date, interviewer, notes
    )

def send_hired_notification(tenant_id: int, phone: str, candidate_name: str,
                           vacancy_title: str, company: str) -> Tuple[bool, str]:
    """
    Enviar notificaci√≥n de contrataci√≥n
    """
    return notification_service.send_hired_notification(
        tenant_id, phone, candidate_name, vacancy_title, company
    )

def send_status_change_notification(tenant_id: int, phone: str, candidate_name: str,
                                   vacancy_title: str, new_status: str) -> Tuple[bool, str]:
    """
    Enviar notificaci√≥n de cambio de estado
    """
    return notification_service.send_status_change_notification(
        tenant_id, phone, candidate_name, vacancy_title, new_status
    )

def send_bot_campaign_message(tenant_id: int, phone: str, message: str) -> Tuple[bool, str]:
    """
    Enviar mensaje de campa√±a
    """
    return notification_service.send_bot_campaign_message(tenant_id, phone, message)

def can_use_whatsapp_conversations(tenant_id: int) -> bool:
    """
    Verificar si el tenant puede usar WhatsApp para conversaciones
    Solo retorna True si est√° configurado con WhatsApp API
    """
    return notification_service.can_use_for_conversations(tenant_id)


# =====================================================
# EJEMPLO DE USO
# =====================================================

if __name__ == "__main__":
    # Ejemplo de uso
    service = WhatsAppNotificationService()
    
    # Verificar modo activo
    mode = service.get_active_mode(1)
    print(f"Modo activo para tenant 1: {mode}")
    
    # Verificar si puede usar conversaciones
    can_chat = service.can_use_for_conversations(1)
    print(f"¬øPuede usar conversaciones?: {can_chat}")
    
    # Enviar notificaci√≥n de postulaci√≥n
    success, message = service.send_application_notification(
        tenant_id=1,
        phone="50412345678",
        candidate_name="Juan P√©rez",
        vacancy_title="Desarrollador Python",
        city="Tegucigalpa",
        salary="L. 25,000",
        requirements="2 a√±os de experiencia en Python y Flask"
    )
    
    print(f"Notificaci√≥n enviada: {success} - {message}")
