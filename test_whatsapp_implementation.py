#!/usr/bin/env python3
"""
üì± TEST WHATSAPP IMPLEMENTATION
===============================

Script para probar la implementaci√≥n de WhatsApp multi-tenant
sin necesidad de que el backend est√© ejecut√°ndose.
"""

import sys
import os

def test_imports():
    """Probar que todos los m√≥dulos se importan correctamente"""
    print("üîç Probando importaciones...")
    
    try:
        from whatsapp_config_manager import config_manager
        print("‚úÖ whatsapp_config_manager importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando whatsapp_config_manager: {e}")
        return False
    
    try:
        from whatsapp_business_api_manager import WhatsAppBusinessAPIManager
        print("‚úÖ whatsapp_business_api_manager importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando whatsapp_business_api_manager: {e}")
        return False
    
    try:
        from whatsapp_webhook_router import WhatsAppWebhookRouter
        print("‚úÖ whatsapp_webhook_router importado correctamente")
    except Exception as e:
        print(f"‚ùå Error importando whatsapp_webhook_router: {e}")
        return False
    
    return True

def test_database_connection():
    """Probar conexi√≥n a base de datos"""
    print("\nüîç Probando conexi√≥n a base de datos...")
    
    try:
        from whatsapp_config_manager import config_manager
        conn = config_manager.get_db_connection()
        
        if conn:
            print("‚úÖ Conexi√≥n a base de datos exitosa")
            
            # Probar que las tablas existen
            cursor = conn.cursor()
            cursor.execute("SHOW TABLES LIKE 'WhatsApp_%'")
            tables = cursor.fetchall()
            
            print(f"üìä Tablas WhatsApp encontradas: {len(tables)}")
            for table in tables:
                print(f"   ‚úÖ {table[0]}")
            
            cursor.close()
            conn.close()
            return True
        else:
            print("‚ùå No se pudo conectar a la base de datos")
            return False
            
    except Exception as e:
        print(f"‚ùå Error conectando a base de datos: {e}")
        return False

def test_config_manager():
    """Probar funcionalidades del gestor de configuraci√≥n"""
    print("\nüîç Probando gestor de configuraci√≥n...")
    
    try:
        from whatsapp_config_manager import config_manager
        
        # Probar obtenci√≥n de configuraciones
        configs = config_manager.get_all_tenant_configs()
        print(f"‚úÖ Configuraciones obtenidas: {len(configs)}")
        
        # Probar estad√≠sticas de un tenant
        stats = config_manager.get_tenant_stats(1)
        print(f"‚úÖ Estad√≠sticas obtenidas para tenant 1")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando gestor de configuraci√≥n: {e}")
        return False

def test_database_tables():
    """Probar estructura de tablas"""
    print("\nüîç Probando estructura de tablas...")
    
    try:
        from whatsapp_config_manager import config_manager
        conn = config_manager.get_db_connection()
        cursor = conn.cursor(dictionary=True)
        
        # Verificar tabla WhatsApp_Config
        cursor.execute("DESCRIBE WhatsApp_Config")
        config_columns = cursor.fetchall()
        print(f"‚úÖ WhatsApp_Config: {len(config_columns)} columnas")
        
        # Verificar tabla WhatsApp_Conversations
        cursor.execute("DESCRIBE WhatsApp_Conversations")
        conv_columns = cursor.fetchall()
        print(f"‚úÖ WhatsApp_Conversations: {len(conv_columns)} columnas")
        
        # Verificar tabla WhatsApp_Messages
        cursor.execute("DESCRIBE WhatsApp_Messages")
        msg_columns = cursor.fetchall()
        print(f"‚úÖ WhatsApp_Messages: {len(msg_columns)} columnas")
        
        # Verificar tabla WhatsApp_Templates
        cursor.execute("DESCRIBE WhatsApp_Templates")
        template_columns = cursor.fetchall()
        print(f"‚úÖ WhatsApp_Templates: {len(template_columns)} columnas")
        
        # Verificar datos iniciales
        cursor.execute("SELECT COUNT(*) as count FROM WhatsApp_Templates WHERE tenant_id = 1")
        template_count = cursor.fetchone()
        print(f"‚úÖ Plantillas iniciales: {template_count['count']}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando estructura de tablas: {e}")
        return False

def test_create_sample_config():
    """Probar creaci√≥n de configuraci√≥n de ejemplo"""
    print("\nüîç Probando creaci√≥n de configuraci√≥n de ejemplo...")
    
    try:
        from whatsapp_config_manager import config_manager
        
        # Datos de configuraci√≥n de ejemplo
        config_data = {
            'api_type': 'business_api',
            'business_api_token': 'EAAxxxx_example_token',
            'phone_number_id': '123456789012345',
            'business_account_id': '987654321098765',
            'webhook_verify_token': 'mi_token_secreto_ejemplo'
        }
        
        # Intentar crear configuraci√≥n
        success, message = config_manager.create_tenant_config(1, config_data)
        
        if success:
            print(f"‚úÖ Configuraci√≥n creada exitosamente: {message}")
            
            # Obtener la configuraci√≥n creada
            config = config_manager.get_tenant_config(1, 'business_api')
            if config:
                print(f"‚úÖ Configuraci√≥n obtenida: {config['api_type']}")
            
            return True
        else:
            print(f"‚ö†Ô∏è No se pudo crear configuraci√≥n: {message}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error probando creaci√≥n de configuraci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal de testing"""
    print("üöÄ INICIANDO PRUEBAS DE WHATSAPP MULTI-TENANT")
    print("=" * 60)
    
    tests = [
        ("Importaciones", test_imports),
        ("Conexi√≥n BD", test_database_connection),
        ("Gestor Config", test_config_manager),
        ("Estructura Tablas", test_database_tables),
        ("Config Ejemplo", test_create_sample_config)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã Ejecutando: {test_name}")
        try:
            if test_func():
                passed += 1
                print(f"‚úÖ {test_name}: PAS√ì")
            else:
                print(f"‚ùå {test_name}: FALL√ì")
        except Exception as e:
            print(f"‚ùå {test_name}: ERROR - {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä RESULTADOS: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°TODAS LAS PRUEBAS PASARON!")
        print("‚úÖ Sistema WhatsApp multi-tenant funcionando correctamente")
    else:
        print("‚ö†Ô∏è Algunas pruebas fallaron")
        print("üîß Revisar los errores mostrados arriba")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
