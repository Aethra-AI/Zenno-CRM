-- =====================================================
-- üóÑÔ∏è SCRIPT COMPLETO DE BASE DE DATOS ORACLE - CRM WHATSAPP
-- =====================================================
-- Este script crea TODAS las tablas necesarias para el backend
-- Basado en el an√°lisis completo del c√≥digo app.py y frontend
-- Compatible con Oracle Database 19c+

-- Configuraci√≥n inicial
SET SERVEROUTPUT ON;
ALTER SESSION SET NLS_LANGUAGE = 'SPANISH';
ALTER SESSION SET NLS_TERRITORY = 'SPAIN';

-- =====================================================
-- 1. TABLA TENANTS (Multi-tenant)
-- =====================================================
CREATE TABLE Tenants (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_empresa VARCHAR2(100) NOT NULL,
    descripcion CLOB,
    contacto_principal VARCHAR2(100),
    email_contacto VARCHAR2(100) NOT NULL,
    telefono VARCHAR2(20),
    direccion CLOB,
    plan VARCHAR2(20) DEFAULT 'basic' CHECK (plan IN ('basic', 'premium', 'enterprise')),
    api_key VARCHAR2(255) UNIQUE,
    activo NUMBER(1) DEFAULT 1 CHECK (activo IN (0,1)),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 2. TABLA ROLES
-- =====================================================
CREATE TABLE Roles (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(50) NOT NULL,
    descripcion CLOB,
    permisos CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 3. TABLA USERS (Usuarios del sistema)
-- =====================================================
CREATE TABLE Users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id NUMBER NOT NULL,
    username VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) NOT NULL UNIQUE,
    password_hash VARCHAR2(255) NOT NULL,
    nombre VARCHAR2(100) NOT NULL,
    apellido VARCHAR2(100),
    telefono VARCHAR2(20),
    rol_id NUMBER DEFAULT 2,
    id_cliente NUMBER,
    activo NUMBER(1) DEFAULT 1 CHECK (activo IN (0,1)),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_eliminacion TIMESTAMP,
    
    CONSTRAINT fk_users_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE,
    CONSTRAINT fk_users_rol FOREIGN KEY (rol_id) REFERENCES Roles(id) ON DELETE SET NULL,
    CONSTRAINT fk_users_cliente FOREIGN KEY (id_cliente) REFERENCES Clientes(id_cliente) ON DELETE SET NULL
);

-- =====================================================
-- 4. TABLA USERSESSIONS (Sesiones de usuario)
-- =====================================================
CREATE TABLE UserSessions (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    token_id VARCHAR2(500) NOT NULL,
    ip_address VARCHAR2(45),
    user_agent CLOB,
    expira TIMESTAMP,
    creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tenant_id NUMBER,
    
    CONSTRAINT fk_sessions_user FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE,
    CONSTRAINT fk_sessions_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE SET NULL
);

-- =====================================================
-- 5. TABLA AFILIADOS (Candidatos)
-- =====================================================
CREATE TABLE Afiliados (
    id_afiliado NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    nombre_completo VARCHAR2(255) NOT NULL,
    identidad VARCHAR2(20) UNIQUE,
    telefono VARCHAR2(20),
    email VARCHAR2(255),
    experiencia CLOB,
    ciudad VARCHAR2(100),
    grado_academico VARCHAR2(100),
    cv_url VARCHAR2(500),
    observaciones CLOB,
    contrato_url VARCHAR2(500),
    disponibilidad_rotativos NUMBER(1) DEFAULT 0 CHECK (disponibilidad_rotativos IN (0,1)),
    transporte_propio NUMBER(1) DEFAULT 0 CHECK (transporte_propio IN (0,1)),
    estado VARCHAR2(50) DEFAULT 'Activo' CHECK (estado IN ('active', 'pending', 'hired', 'rejected')),
    puntuacion NUMBER(3,2) DEFAULT 0.00,
    ultima_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ultimo_contacto TIMESTAMP,
    tenant_id NUMBER NOT NULL,
    disponibilidad VARCHAR2(100),
    linkedin VARCHAR2(255),
    portfolio VARCHAR2(255),
    skills CLOB,
    comentarios CLOB,
    cargo_solicitado VARCHAR2(100),
    habilidades CLOB,
    fuente_reclutamiento VARCHAR2(50),
    fecha_nacimiento DATE,
    nacionalidad VARCHAR2(50),
    
    CONSTRAINT fk_afiliados_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE
);

-- =====================================================
-- 6. TABLA CLIENTES (Empresas que publican vacantes)
-- =====================================================
CREATE TABLE Clientes (
    id_cliente NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    empresa VARCHAR2(255) NOT NULL,
    contacto_nombre VARCHAR2(255),
    telefono VARCHAR2(20),
    email VARCHAR2(255),
    sector VARCHAR2(100),
    observaciones CLOB,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tenant_id NUMBER NOT NULL,
    
    CONSTRAINT fk_clientes_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE
);

-- =====================================================
-- 7. TABLA VACANTES (Ofertas de trabajo)
-- =====================================================
CREATE TABLE Vacantes (
    id_vacante NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_cliente NUMBER NOT NULL,
    cargo_solicitado VARCHAR2(255) NOT NULL,
    descripcion CLOB,
    requisitos CLOB,
    salario_min NUMBER(10,2),
    salario_max NUMBER(10,2),
    salario NUMBER(10,2),
    ciudad VARCHAR2(100),
    estado VARCHAR2(50) DEFAULT 'Abierta' CHECK (estado IN ('Abierta', 'Cerrada', 'Pausada', 'Activa')),
    fecha_apertura DATE DEFAULT SYSDATE,
    fecha_cierre DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tenant_id NUMBER,
    
    CONSTRAINT fk_vacantes_cliente FOREIGN KEY (id_cliente) REFERENCES Clientes(id_cliente) ON DELETE CASCADE,
    CONSTRAINT fk_vacantes_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE SET NULL
);

-- =====================================================
-- 8. TABLA POSTULACIONES
-- =====================================================
CREATE TABLE Postulaciones (
    id_postulacion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_afiliado NUMBER NOT NULL,
    id_vacante NUMBER NOT NULL,
    fecha_aplicacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estado VARCHAR2(50) DEFAULT 'Pendiente' CHECK (estado IN ('Pendiente', 'En Revisi√≥n', 'Entrevistado', 'Aprobado', 'Rechazado', 'Recibida', 'En Entrevista')),
    comentarios CLOB,
    whatsapp_notification_status VARCHAR2(50) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tenant_id NUMBER NOT NULL,
    
    CONSTRAINT fk_postulaciones_afiliado FOREIGN KEY (id_afiliado) REFERENCES Afiliados(id_afiliado) ON DELETE CASCADE,
    CONSTRAINT fk_postulaciones_vacante FOREIGN KEY (id_vacante) REFERENCES Vacantes(id_vacante) ON DELETE CASCADE,
    CONSTRAINT fk_postulaciones_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE
);

-- =====================================================
-- 9. TABLA ENTREVISTAS
-- =====================================================
CREATE TABLE Entrevistas (
    id_entrevista NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_postulacion NUMBER NOT NULL,
    fecha_hora TIMESTAMP NOT NULL,
    tipo_entrevista VARCHAR2(50) DEFAULT 'Presencial' CHECK (tipo_entrevista IN ('Presencial', 'Virtual', 'Telef√≥nica')),
    resultado VARCHAR2(50) DEFAULT 'Pendiente' CHECK (resultado IN ('Aprobado', 'Rechazado', 'Pendiente', 'Programada')),
    notas CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    entrevistador VARCHAR2(255) DEFAULT 'Sin asignar',
    observaciones CLOB,
    tenant_id NUMBER NOT NULL,
    
    CONSTRAINT fk_entrevistas_postulacion FOREIGN KEY (id_postulacion) REFERENCES Postulaciones(id_postulacion) ON DELETE CASCADE,
    CONSTRAINT fk_entrevistas_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE
);

-- =====================================================
-- 10. TABLA CONTRATADOS
-- =====================================================
CREATE TABLE Contratados (
    id_contratacion NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_afiliado NUMBER NOT NULL,
    id_vacante NUMBER NOT NULL,
    fecha_contratacion DATE NOT NULL,
    salario_final NUMBER(10,2),
    tarifa_servicio NUMBER(10,2),
    monto_pagado NUMBER(10,2) DEFAULT 0.00,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tenant_id NUMBER NOT NULL DEFAULT 1,
    
    CONSTRAINT fk_contratados_afiliado FOREIGN KEY (id_afiliado) REFERENCES Afiliados(id_afiliado) ON DELETE CASCADE,
    CONSTRAINT fk_contratados_vacante FOREIGN KEY (id_vacante) REFERENCES Vacantes(id_vacante) ON DELETE CASCADE,
    CONSTRAINT fk_contratados_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE
);

-- =====================================================
-- 11. TABLA CALENDARIO - RECORDATORIOS
-- =====================================================
CREATE TABLE calendar_reminders (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id NUMBER NOT NULL,
    title VARCHAR2(255) NOT NULL,
    description CLOB,
    date DATE NOT NULL,
    time VARCHAR2(8) NOT NULL,
    type VARCHAR2(20) NOT NULL DEFAULT 'personal' CHECK (type IN ('personal', 'team', 'general')),
    priority VARCHAR2(10) NOT NULL DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),
    status VARCHAR2(20) NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'completed', 'cancelled')),
    created_by NUMBER NOT NULL,
    assigned_to CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_calendar_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE,
    CONSTRAINT fk_calendar_created_by FOREIGN KEY (created_by) REFERENCES Users(id) ON DELETE CASCADE
);

-- =====================================================
-- 12. TABLA ENTREVISTAS DEL CALENDARIO
-- =====================================================
CREATE TABLE interviews (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id NUMBER NOT NULL,
    candidate_id NUMBER NOT NULL,
    vacancy_id NUMBER NOT NULL,
    interview_date DATE NOT NULL,
    interview_time VARCHAR2(8) NOT NULL,
    status VARCHAR2(20) NOT NULL DEFAULT 'scheduled' CHECK (status IN ('scheduled', 'completed', 'cancelled', 'rescheduled')),
    notes CLOB,
    interviewer VARCHAR2(255),
    created_by NUMBER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_interviews_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE,
    CONSTRAINT fk_interviews_candidate FOREIGN KEY (candidate_id) REFERENCES Afiliados(id_afiliado) ON DELETE CASCADE,
    CONSTRAINT fk_interviews_vacancy FOREIGN KEY (vacancy_id) REFERENCES Vacantes(id_vacante) ON DELETE CASCADE,
    CONSTRAINT fk_interviews_created_by FOREIGN KEY (created_by) REFERENCES Users(id) ON DELETE CASCADE
);

-- =====================================================
-- 13. TABLA WHATSAPP CONFIG
-- =====================================================
CREATE TABLE WhatsApp_Config (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id NUMBER NOT NULL,
    api_type VARCHAR2(20) NOT NULL CHECK (api_type IN ('business_api', 'whatsapp_web')),
    business_api_token VARCHAR2(500),
    phone_number_id VARCHAR2(50),
    webhook_verify_token VARCHAR2(100),
    business_account_id VARCHAR2(50),
    web_session_id VARCHAR2(100),
    web_qr_code CLOB,
    web_status VARCHAR2(20) DEFAULT 'disconnected' CHECK (web_status IN ('disconnected', 'qr_ready', 'connected', 'authenticated', 'ready')),
    web_last_seen TIMESTAMP,
    webhook_url VARCHAR2(255),
    is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0,1)),
    auto_reconnect NUMBER(1) DEFAULT 1 CHECK (auto_reconnect IN (0,1)),
    max_retries NUMBER DEFAULT 3,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_whatsapp_config_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE,
    CONSTRAINT uk_whatsapp_tenant_api UNIQUE (tenant_id, api_type)
);

-- =====================================================
-- 14. TABLA WHATSAPP CONVERSACIONES
-- =====================================================
CREATE TABLE WhatsApp_Conversations (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id NUMBER NOT NULL,
    conversation_id VARCHAR2(100) NOT NULL,
    contact_phone VARCHAR2(20) NOT NULL,
    contact_name VARCHAR2(100),
    contact_wa_id VARCHAR2(50),
    last_message_at TIMESTAMP,
    last_message_preview CLOB,
    unread_count NUMBER DEFAULT 0,
    message_count NUMBER DEFAULT 0,
    status VARCHAR2(20) DEFAULT 'active' CHECK (status IN ('active', 'archived', 'blocked', 'muted')),
    is_pinned NUMBER(1) DEFAULT 0 CHECK (is_pinned IN (0,1)),
    priority VARCHAR2(10) DEFAULT 'normal' CHECK (priority IN ('low', 'normal', 'high', 'urgent')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_whatsapp_conv_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE,
    CONSTRAINT uk_whatsapp_conversation UNIQUE (tenant_id, conversation_id)
);

-- =====================================================
-- 15. TABLA WHATSAPP MENSAJES
-- =====================================================
CREATE TABLE WhatsApp_Messages (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id NUMBER NOT NULL,
    conversation_id NUMBER NOT NULL,
    message_id VARCHAR2(100) NOT NULL,
    wa_message_id VARCHAR2(100),
    direction VARCHAR2(10) NOT NULL CHECK (direction IN ('inbound', 'outbound')),
    message_type VARCHAR2(20) NOT NULL CHECK (message_type IN ('text', 'image', 'document', 'audio', 'video', 'location', 'contact', 'sticker', 'template')),
    content CLOB,
    media_url VARCHAR2(500),
    media_mime_type VARCHAR2(100),
    media_size NUMBER,
    media_filename VARCHAR2(255),
    status VARCHAR2(20) DEFAULT 'pending' CHECK (status IN ('sent', 'delivered', 'read', 'failed', 'pending')),
    error_code VARCHAR2(50),
    error_message CLOB,
    timestamp TIMESTAMP NOT NULL,
    wa_timestamp TIMESTAMP,
    context_message_id VARCHAR2(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_whatsapp_msg_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE,
    CONSTRAINT fk_whatsapp_msg_conversation FOREIGN KEY (conversation_id) REFERENCES WhatsApp_Conversations(id) ON DELETE CASCADE,
    CONSTRAINT uk_whatsapp_message UNIQUE (tenant_id, message_id)
);

-- =====================================================
-- 16. TABLA WHATSAPP PLANTILLAS
-- =====================================================
CREATE TABLE WhatsApp_Templates (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id NUMBER NOT NULL,
    name VARCHAR2(100) NOT NULL,
    category VARCHAR2(20) NOT NULL CHECK (category IN ('postulation', 'interview', 'hiring', 'general', 'marketing', 'reminder')),
    subject VARCHAR2(200),
    content CLOB NOT NULL,
    variables CLOB,
    is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0,1)),
    is_default NUMBER(1) DEFAULT 0 CHECK (is_default IN (0,1)),
    usage_count NUMBER DEFAULT 0,
    last_used_at TIMESTAMP,
    created_by NUMBER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_whatsapp_templates_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE,
    CONSTRAINT fk_whatsapp_templates_created_by FOREIGN KEY (created_by) REFERENCES Users(id) ON DELETE SET NULL
);

-- =====================================================
-- 17. TABLA WHATSAPP CAMPA√ëAS
-- =====================================================
CREATE TABLE WhatsApp_Campaigns (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id NUMBER NOT NULL,
    name VARCHAR2(200) NOT NULL,
    description CLOB,
    template_id NUMBER,
    custom_message CLOB,
    target_type VARCHAR2(20) NOT NULL CHECK (target_type IN ('candidates', 'contacts', 'list')),
    target_criteria CLOB,
    target_list CLOB,
    status VARCHAR2(20) DEFAULT 'draft' CHECK (status IN ('draft', 'scheduled', 'sending', 'sent', 'failed', 'cancelled')),
    scheduled_at TIMESTAMP,
    started_at TIMESTAMP,
    completed_at TIMESTAMP,
    total_recipients NUMBER DEFAULT 0,
    messages_sent NUMBER DEFAULT 0,
    messages_delivered NUMBER DEFAULT 0,
    messages_read NUMBER DEFAULT 0,
    messages_failed NUMBER DEFAULT 0,
    created_by NUMBER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_whatsapp_campaigns_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE,
    CONSTRAINT fk_whatsapp_campaigns_template FOREIGN KEY (template_id) REFERENCES WhatsApp_Templates(id) ON DELETE SET NULL,
    CONSTRAINT fk_whatsapp_campaigns_created_by FOREIGN KEY (created_by) REFERENCES Users(id) ON DELETE SET NULL
);

-- =====================================================
-- 18. TABLA WHATSAPP WEBHOOKS
-- =====================================================
CREATE TABLE WhatsApp_Webhooks (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id NUMBER NOT NULL,
    webhook_type VARCHAR2(20) NOT NULL CHECK (webhook_type IN ('message', 'status', 'template', 'account_update')),
    phone_number_id VARCHAR2(50),
    raw_data CLOB NOT NULL,
    processed NUMBER(1) DEFAULT 0 CHECK (processed IN (0,1)),
    processing_error CLOB,
    received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processed_at TIMESTAMP,
    
    CONSTRAINT fk_whatsapp_webhooks_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE
);

-- =====================================================
-- 19. TABLA WHATSAPP ACTIVITY LOGS
-- =====================================================
CREATE TABLE WhatsApp_Activity_Logs (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id NUMBER NOT NULL,
    activity_type VARCHAR2(50) NOT NULL CHECK (activity_type IN ('message_sent', 'message_received', 'conversation_started', 'conversation_ended', 'campaign_started', 'campaign_completed', 'connection_status', 'error')),
    description CLOB,
    related_id NUMBER,
    related_type VARCHAR2(20) CHECK (related_type IN ('message', 'conversation', 'campaign', 'template')),
    metadata CLOB,
    user_id NUMBER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_whatsapp_logs_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE,
    CONSTRAINT fk_whatsapp_logs_user FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE SET NULL
);

-- =====================================================
-- 20. TABLA WHATSAPP NOTIFICATION RULES
-- =====================================================
CREATE TABLE WhatsApp_Notification_Rules (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tenant_id NUMBER NOT NULL,
    name VARCHAR2(200) NOT NULL,
    description CLOB,
    trigger_event VARCHAR2(30) NOT NULL CHECK (trigger_event IN ('candidate_postulated', 'interview_scheduled', 'candidate_hired', 'status_changed', 'custom')),
    conditions CLOB,
    template_id NUMBER,
    custom_message CLOB,
    delay_minutes NUMBER DEFAULT 0,
    is_active NUMBER(1) DEFAULT 1 CHECK (is_active IN (0,1)),
    last_triggered_at TIMESTAMP,
    trigger_count NUMBER DEFAULT 0,
    created_by NUMBER,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_whatsapp_rules_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE,
    CONSTRAINT fk_whatsapp_rules_template FOREIGN KEY (template_id) REFERENCES WhatsApp_Templates(id) ON DELETE SET NULL,
    CONSTRAINT fk_whatsapp_rules_created_by FOREIGN KEY (created_by) REFERENCES Users(id) ON DELETE SET NULL
);

-- =====================================================
-- 21. TABLA TAGS (Etiquetas para candidatos)
-- =====================================================
CREATE TABLE Tags (
    id_tag NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_tag VARCHAR2(100) NOT NULL,
    tenant_id NUMBER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_tags_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE
);

-- =====================================================
-- 22. TABLA AFILIADO_TAGS (Relaci√≥n candidatos-etiquetas)
-- =====================================================
CREATE TABLE Afiliado_Tags (
    id_afiliado NUMBER NOT NULL,
    id_tag NUMBER NOT NULL,
    tenant_id NUMBER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_afiliado_tags_afiliado FOREIGN KEY (id_afiliado) REFERENCES Afiliados(id_afiliado) ON DELETE CASCADE,
    CONSTRAINT fk_afiliado_tags_tag FOREIGN KEY (id_tag) REFERENCES Tags(id_tag) ON DELETE CASCADE,
    CONSTRAINT fk_afiliado_tags_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE,
    CONSTRAINT pk_afiliado_tags PRIMARY KEY (id_afiliado, id_tag, tenant_id)
);

-- =====================================================
-- 23. TABLA WHATSAPP_TEMPLATES (Plantillas de WhatsApp - versi√≥n legacy)
-- =====================================================
CREATE TABLE Whatsapp_Templates (
    id_template NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_plantilla VARCHAR2(100) NOT NULL,
    asunto VARCHAR2(200),
    cuerpo_mensaje CLOB NOT NULL,
    tenant_id NUMBER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_whatsapp_templates_legacy_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE
);

-- =====================================================
-- 24. TABLA EMAIL_TEMPLATES (Plantillas de email)
-- =====================================================
CREATE TABLE Email_Templates (
    id_template NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre_plantilla VARCHAR2(100) NOT NULL,
    asunto VARCHAR2(200),
    cuerpo_html CLOB NOT NULL,
    id_cliente NUMBER DEFAULT 1,
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    tenant_id NUMBER NOT NULL DEFAULT 1,
    
    CONSTRAINT fk_email_templates_tenant FOREIGN KEY (tenant_id) REFERENCES Tenants(id) ON DELETE CASCADE,
    CONSTRAINT fk_email_templates_cliente FOREIGN KEY (id_cliente) REFERENCES Clientes(id_cliente) ON DELETE SET NULL
);

-- =====================================================
-- 25. TABLA PUNTUACIONES_CANDIDATO (Puntuaciones de candidatos)
-- =====================================================
CREATE TABLE puntuaciones_candidato (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_afiliado NUMBER NOT NULL,
    puntuacion NUMBER(3,2) NOT NULL,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    criterio VARCHAR2(100),
    observaciones CLOB,
    
    CONSTRAINT fk_puntuaciones_afiliado FOREIGN KEY (id_afiliado) REFERENCES Afiliados(id_afiliado) ON DELETE CASCADE
);

-- =====================================================
-- 26. TABLA CHATBOT_SETTINGS (Configuraci√≥n del chatbot)
-- =====================================================
CREATE TABLE Chatbot_Settings (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    setting_name VARCHAR2(100) NOT NULL UNIQUE,
    setting_value CLOB,
    description CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 27. TABLA DOCUMENTOS (Documentos de candidatos)
-- =====================================================
CREATE TABLE documentos (
    id_documento NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_afiliado NUMBER NOT NULL,
    nombre_archivo VARCHAR2(255) NOT NULL,
    tipo_documento VARCHAR2(100),
    fecha_subida TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ruta_archivo VARCHAR2(500),
    
    CONSTRAINT fk_documentos_afiliado FOREIGN KEY (id_afiliado) REFERENCES Afiliados(id_afiliado) ON DELETE CASCADE
);

-- =====================================================
-- 28. TABLA USERACTIVITYLOG (Log de actividad de usuarios)
-- =====================================================
CREATE TABLE useractivitylog (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    activity_type VARCHAR2(50) NOT NULL,
    description CLOB,
    ip_address VARCHAR2(45),
    user_agent CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_useractivitylog_user FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE
);

-- =====================================================
-- 29. TABLA ERRORLOGS (Log de errores del sistema)
-- =====================================================
CREATE TABLE errorlogs (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    error_type VARCHAR2(100) NOT NULL,
    error_message CLOB NOT NULL,
    stack_trace CLOB,
    user_id NUMBER,
    ip_address VARCHAR2(45),
    user_agent CLOB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_errorlogs_user FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE SET NULL
);

-- =====================================================
-- 30. TABLA MENSAJES_CONTACTO (Mensajes del formulario de contacto)
-- =====================================================
CREATE TABLE mensajes_contacto (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(100) NOT NULL,
    email VARCHAR2(100) NOT NULL,
    telefono VARCHAR2(20),
    mensaje CLOB NOT NULL,
    fecha_recepcion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estado VARCHAR2(20) DEFAULT 'nuevo' CHECK (estado IN ('nuevo', 'le√≠do', 'respondido'))
);

-- =====================================================
-- 31. TABLA NOTIFICATIONS (Sistema de notificaciones)
-- =====================================================
CREATE TABLE notifications (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER,
    tipo VARCHAR2(50) NOT NULL,
    titulo VARCHAR2(255) NOT NULL,
    mensaje CLOB,
    leida NUMBER(1) DEFAULT 0 CHECK (leida IN (0,1)),
    prioridad VARCHAR2(20) DEFAULT 'media' CHECK (prioridad IN ('baja', 'media', 'alta', 'urgente')),
    fecha_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    fecha_lectura TIMESTAMP,
    metadata CLOB,
    
    CONSTRAINT fk_notifications_user FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE SET NULL
);

-- =====================================================
-- 32. TABLA POSTS (Sistema de blog/noticias)
-- =====================================================
CREATE TABLE posts (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title VARCHAR2(200) NOT NULL,
    excerpt CLOB,
    content CLOB NOT NULL,
    image_url VARCHAR2(500),
    author VARCHAR2(100),
    estado VARCHAR2(20) DEFAULT 'borrador' CHECK (estado IN ('borrador', 'publicado', 'archivado')),
    fecha_publicacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =====================================================
-- 33. TABLA CANDIDATO_TAGS (Relaci√≥n candidatos-etiquetas - versi√≥n alternativa)
-- =====================================================
CREATE TABLE candidato_tags (
    id_afiliado NUMBER NOT NULL,
    id_tag NUMBER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    CONSTRAINT fk_candidato_tags_afiliado FOREIGN KEY (id_afiliado) REFERENCES Afiliados(id_afiliado) ON DELETE CASCADE,
    CONSTRAINT fk_candidato_tags_tag FOREIGN KEY (id_tag) REFERENCES Tags(id_tag) ON DELETE CASCADE,
    CONSTRAINT pk_candidato_tags PRIMARY KEY (id_afiliado, id_tag)
);

-- =====================================================
-- 34. TABLA INTERACCIONES (Interacciones con candidatos)
-- =====================================================
CREATE TABLE interacciones (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_afiliado NUMBER NOT NULL,
    tipo VARCHAR2(50) NOT NULL,
    notas CLOB,
    fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    usuario_id NUMBER NOT NULL,
    estado VARCHAR2(50) DEFAULT 'completada',
    fecha_programada TIMESTAMP,
    
    CONSTRAINT fk_interacciones_afiliado FOREIGN KEY (id_afiliado) REFERENCES Afiliados(id_afiliado) ON DELETE CASCADE,
    CONSTRAINT fk_interacciones_usuario FOREIGN KEY (usuario_id) REFERENCES Users(id) ON DELETE CASCADE
);

-- =====================================================
-- CREAR √çNDICES PARA OPTIMIZACI√ìN
-- =====================================================

-- √çndices para tabla Users
CREATE INDEX idx_users_tenant ON Users(tenant_id);
CREATE INDEX idx_users_email ON Users(email);
CREATE INDEX idx_users_rol ON Users(rol_id);
CREATE INDEX idx_users_cliente ON Users(id_cliente);
CREATE INDEX idx_users_activo ON Users(activo);

-- √çndices para tabla UserSessions
CREATE INDEX idx_sessions_user ON UserSessions(user_id);
CREATE INDEX idx_sessions_tenant ON UserSessions(tenant_id);
CREATE INDEX idx_sessions_token ON UserSessions(token_id);

-- √çndices para tabla Afiliados
CREATE INDEX idx_afiliados_tenant ON Afiliados(tenant_id);
CREATE INDEX idx_afiliados_estado ON Afiliados(estado);
CREATE INDEX idx_afiliados_ciudad ON Afiliados(ciudad);
CREATE INDEX idx_afiliados_email ON Afiliados(email);

-- √çndices para tabla Clientes
CREATE INDEX idx_clientes_tenant ON Clientes(tenant_id);
CREATE INDEX idx_clientes_empresa ON Clientes(empresa);

-- √çndices para tabla Vacantes
CREATE INDEX idx_vacantes_cliente ON Vacantes(id_cliente);
CREATE INDEX idx_vacantes_estado ON Vacantes(estado);
CREATE INDEX idx_vacantes_ciudad ON Vacantes(ciudad);
CREATE INDEX idx_vacantes_tenant ON Vacantes(tenant_id);

-- √çndices para tabla Postulaciones
CREATE INDEX idx_postulaciones_afiliado ON Postulaciones(id_afiliado);
CREATE INDEX idx_postulaciones_vacante ON Postulaciones(id_vacante);
CREATE INDEX idx_postulaciones_estado ON Postulaciones(estado);

-- √çndices para tabla Entrevistas
CREATE INDEX idx_entrevistas_postulacion ON Entrevistas(id_postulacion);
CREATE INDEX idx_entrevistas_fecha ON Entrevistas(fecha_entrevista);

-- √çndices para tabla Contratados
CREATE INDEX idx_contratados_postulacion ON Contratados(id_postulacion);
CREATE INDEX idx_contratados_estado ON Contratados(estado);

-- √çndices para calendario
CREATE INDEX idx_calendar_tenant_date ON calendar_reminders(tenant_id, date);
CREATE INDEX idx_calendar_tenant_type ON calendar_reminders(tenant_id, type);
CREATE INDEX idx_calendar_created_by ON calendar_reminders(created_by);
CREATE INDEX idx_calendar_status ON calendar_reminders(status);

-- √çndices para entrevistas
CREATE INDEX idx_interviews_tenant_date ON interviews(tenant_id, interview_date);
CREATE INDEX idx_interviews_candidate ON interviews(candidate_id);
CREATE INDEX idx_interviews_vacancy ON interviews(vacancy_id);
CREATE INDEX idx_interviews_status ON interviews(status);

-- √çndices para WhatsApp
CREATE INDEX idx_whatsapp_config_tenant_active ON WhatsApp_Config(tenant_id, is_active);
CREATE INDEX idx_whatsapp_config_phone ON WhatsApp_Config(phone_number_id);
CREATE INDEX idx_whatsapp_config_web_session ON WhatsApp_Config(web_session_id);

CREATE INDEX idx_whatsapp_conv_tenant_phone ON WhatsApp_Conversations(tenant_id, contact_phone);
CREATE INDEX idx_whatsapp_conv_tenant_status ON WhatsApp_Conversations(tenant_id, status);
CREATE INDEX idx_whatsapp_conv_last_message ON WhatsApp_Conversations(last_message_at);
CREATE INDEX idx_whatsapp_conv_unread ON WhatsApp_Conversations(tenant_id, unread_count);

CREATE INDEX idx_whatsapp_msg_conversation_timestamp ON WhatsApp_Messages(conversation_id, timestamp);
CREATE INDEX idx_whatsapp_msg_tenant_timestamp ON WhatsApp_Messages(tenant_id, timestamp);
CREATE INDEX idx_whatsapp_msg_status ON WhatsApp_Messages(status);
CREATE INDEX idx_whatsapp_msg_type ON WhatsApp_Messages(message_type);
CREATE INDEX idx_whatsapp_msg_direction ON WhatsApp_Messages(direction);

CREATE INDEX idx_whatsapp_templates_tenant_category ON WhatsApp_Templates(tenant_id, category, is_active);
CREATE INDEX idx_whatsapp_templates_tenant_active ON WhatsApp_Templates(tenant_id, is_active);

CREATE INDEX idx_whatsapp_campaigns_tenant_status ON WhatsApp_Campaigns(tenant_id, status);
CREATE INDEX idx_whatsapp_campaigns_scheduled ON WhatsApp_Campaigns(scheduled_at);

CREATE INDEX idx_whatsapp_webhooks_tenant_type ON WhatsApp_Webhooks(tenant_id, webhook_type);
CREATE INDEX idx_whatsapp_webhooks_processed ON WhatsApp_Webhooks(processed);
CREATE INDEX idx_whatsapp_webhooks_received ON WhatsApp_Webhooks(received_at);

CREATE INDEX idx_whatsapp_logs_tenant_activity ON WhatsApp_Activity_Logs(tenant_id, activity_type);
CREATE INDEX idx_whatsapp_logs_created_at ON WhatsApp_Activity_Logs(created_at);

CREATE INDEX idx_whatsapp_rules_tenant_trigger ON WhatsApp_Notification_Rules(tenant_id, trigger_event);
CREATE INDEX idx_whatsapp_rules_tenant_active ON WhatsApp_Notification_Rules(tenant_id, is_active);

-- √çndices para tabla Tags
CREATE INDEX idx_tags_tenant ON Tags(tenant_id);
CREATE INDEX idx_tags_nombre ON Tags(nombre_tag);

-- √çndices para tabla Afiliado_Tags
CREATE INDEX idx_afiliado_tags_afiliado ON Afiliado_Tags(id_afiliado);
CREATE INDEX idx_afiliado_tags_tag ON Afiliado_Tags(id_tag);
CREATE INDEX idx_afiliado_tags_tenant ON Afiliado_Tags(tenant_id);

-- √çndices para tabla Whatsapp_Templates (legacy)
CREATE INDEX idx_whatsapp_templates_legacy_tenant ON Whatsapp_Templates(tenant_id);
CREATE INDEX idx_whatsapp_templates_legacy_nombre ON Whatsapp_Templates(nombre_plantilla);

-- √çndices para tabla Email_Templates
CREATE INDEX idx_email_templates_tenant ON Email_Templates(tenant_id);
CREATE INDEX idx_email_templates_nombre ON Email_Templates(nombre_plantilla);

-- √çndices para tabla puntuaciones_candidato
CREATE INDEX idx_puntuaciones_afiliado ON puntuaciones_candidato(id_afiliado);
CREATE INDEX idx_puntuaciones_fecha ON puntuaciones_candidato(fecha);

-- √çndices para tabla Chatbot_Settings
CREATE INDEX idx_chatbot_settings_name ON Chatbot_Settings(setting_name);

-- √çndices para tabla documentos
CREATE INDEX idx_documentos_afiliado ON documentos(id_afiliado);
CREATE INDEX idx_documentos_tipo ON documentos(tipo_documento);
CREATE INDEX idx_documentos_fecha ON documentos(fecha_subida);

-- √çndices para tabla useractivitylog
CREATE INDEX idx_useractivitylog_user ON useractivitylog(user_id);
CREATE INDEX idx_useractivitylog_type ON useractivitylog(activity_type);
CREATE INDEX idx_useractivitylog_created ON useractivitylog(created_at);

-- √çndices para tabla errorlogs
CREATE INDEX idx_errorlogs_type ON errorlogs(error_type);
CREATE INDEX idx_errorlogs_user ON errorlogs(user_id);
CREATE INDEX idx_errorlogs_created ON errorlogs(created_at);

-- √çndices para tabla mensajes_contacto
CREATE INDEX idx_mensajes_contacto_estado ON mensajes_contacto(estado);
CREATE INDEX idx_mensajes_contacto_fecha ON mensajes_contacto(fecha_recepcion);

-- √çndices para tabla notifications
CREATE INDEX idx_notifications_user ON notifications(user_id);
CREATE INDEX idx_notifications_tipo ON notifications(tipo);
CREATE INDEX idx_notifications_leida ON notifications(leida);
CREATE INDEX idx_notifications_prioridad ON notifications(prioridad);

-- √çndices para tabla posts
CREATE INDEX idx_posts_estado ON posts(estado);
CREATE INDEX idx_posts_autor ON posts(author);
CREATE INDEX idx_posts_fecha ON posts(fecha_publicacion);

-- √çndices para tabla candidato_tags
CREATE INDEX idx_candidato_tags_afiliado ON candidato_tags(id_afiliado);
CREATE INDEX idx_candidato_tags_tag ON candidato_tags(id_tag);

-- √çndices para tabla interacciones
CREATE INDEX idx_interacciones_afiliado ON interacciones(id_afiliado);
CREATE INDEX idx_interacciones_usuario ON interacciones(usuario_id);
CREATE INDEX idx_interacciones_tipo ON interacciones(tipo);
CREATE INDEX idx_interacciones_fecha ON interacciones(fecha);

-- =====================================================
-- CREAR TRIGGERS PARA ACTUALIZACI√ìN AUTOM√ÅTICA
-- =====================================================

-- Trigger para actualizar fecha_actualizacion en Tenants
CREATE OR REPLACE TRIGGER tr_tenants_update
    BEFORE UPDATE ON Tenants
    FOR EACH ROW
BEGIN
    :NEW.fecha_actualizacion := CURRENT_TIMESTAMP;
END;
/

-- Trigger para actualizar updated_at en Users
CREATE OR REPLACE TRIGGER tr_users_update
    BEFORE UPDATE ON Users
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Trigger para actualizar ultima_actualizacion en Afiliados
CREATE OR REPLACE TRIGGER tr_afiliados_update
    BEFORE UPDATE ON Afiliados
    FOR EACH ROW
BEGIN
    :NEW.ultima_actualizacion := CURRENT_TIMESTAMP;
END;
/

-- Trigger para actualizar updated_at en WhatsApp_Config
CREATE OR REPLACE TRIGGER tr_whatsapp_config_update
    BEFORE UPDATE ON WhatsApp_Config
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Trigger para actualizar updated_at en WhatsApp_Conversations
CREATE OR REPLACE TRIGGER tr_whatsapp_conversations_update
    BEFORE UPDATE ON WhatsApp_Conversations
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- Trigger para actualizar updated_at en WhatsApp_Messages
CREATE OR REPLACE TRIGGER tr_whatsapp_messages_update
    BEFORE UPDATE ON WhatsApp_Messages
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

-- =====================================================
-- INSERTAR DATOS INICIALES
-- =====================================================

-- Insertar tenant por defecto
INSERT INTO Tenants (id, nombre_empresa, descripcion, contacto_principal, email_contacto, telefono, direccion, plan, activo) 
VALUES (1, 'Empresa Demo', 'Empresa de demostraci√≥n para el CRM', 'Admin Demo', 'admin@demo.com', '1234567890', 'Direcci√≥n Demo', 'basic', 1);

-- Insertar roles por defecto
INSERT INTO Roles (id, nombre, descripcion, permisos) VALUES 
(1, 'Administrador', 'Acceso completo al sistema', '{"all": true}');
INSERT INTO Roles (id, nombre, descripcion, permisos) VALUES 
(2, 'Reclutador', 'Acceso a reclutamiento y candidatos', '{"candidates": true, "vacancies": true, "applications": true}');
INSERT INTO Roles (id, nombre, descripcion, permisos) VALUES 
(3, 'Usuario', 'Acceso b√°sico al sistema', '{"view": true}');

-- Insertar usuario administrador por defecto
INSERT INTO Users (id, tenant_id, username, email, password_hash, nombre, apellido, telefono, rol_id, activo) 
VALUES (1, 1, 'admin', 'admin@crm.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj5/LewdBPj5', 'Admin', 'Sistema', '1234567890', 1, 1);

-- Insertar usuario reclutador por defecto
INSERT INTO Users (id, tenant_id, username, email, password_hash, nombre, apellido, telefono, rol_id, activo) 
VALUES (2, 1, 'reclutador', 'reclutador@crm.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj5/LewdBPj5', 'Reclutador', 'Demo', '1234567891', 2, 1);

-- Insertar cliente de ejemplo
INSERT INTO Clientes (id_cliente, empresa, contacto_nombre, telefono, email, sector, observaciones, tenant_id) 
VALUES (1, 'Empresa Cliente Demo', 'Juan P√©rez', '9876543210', 'juan@empresa.com', 'Tecnolog√≠a', 'Cliente de demostraci√≥n', 1);

-- Insertar vacante de ejemplo
INSERT INTO Vacantes (id_vacante, id_cliente, cargo_solicitado, ciudad, requisitos, salario, fecha_apertura, estado, tenant_id) 
VALUES (1, 1, 'Desarrollador Full Stack', 'Ciudad Demo', 'Experiencia en Python, JavaScript, React', 50000.00, SYSDATE, 'Abierta', 1);

-- Insertar candidato de ejemplo
INSERT INTO Afiliados (id_afiliado, nombre_completo, identidad, telefono, email, experiencia, ciudad, grado_academico, tenant_id) 
VALUES (1, 'Candidato Demo', '1234567890123', '5555555555', 'candidato@demo.com', '3 a√±os en desarrollo web', 'Ciudad Demo', 'Ingenier√≠a en Sistemas', 1);

-- Insertar plantillas de WhatsApp por defecto
INSERT INTO WhatsApp_Templates (tenant_id, name, category, subject, content, is_default, is_active) VALUES
(1, 'Postulaci√≥n Recibida', 'postulation', 'Postulaci√≥n Recibida', 'Hola {{nombre}}, hemos recibido tu postulaci√≥n para la vacante de {{cargo}}. Te contactaremos pronto con m√°s informaci√≥n. ¬°Gracias por tu inter√©s!', 1, 1);

INSERT INTO WhatsApp_Templates (tenant_id, name, category, subject, content, is_default, is_active) VALUES
(1, 'Entrevista Programada', 'interview', 'Entrevista Programada', 'Hola {{nombre}}, tu entrevista para {{cargo}} est√° programada para el {{fecha}} a las {{hora}}. Por favor confirma tu asistencia.', 1, 1);

INSERT INTO WhatsApp_Templates (tenant_id, name, category, subject, content, is_default, is_active) VALUES
(1, 'Candidato Contratado', 'hiring', '¬°Felicitaciones!', 'Hola {{nombre}}, ¬°felicitaciones! Has sido seleccionado para el puesto de {{cargo}}. Te contactaremos pronto con los detalles de tu incorporaci√≥n.', 1, 1);

INSERT INTO WhatsApp_Templates (tenant_id, name, category, subject, content, is_default, is_active) VALUES
(1, 'Recordatorio de Entrevista', 'reminder', 'Recordatorio de Entrevista', 'Hola {{nombre}}, te recordamos que tienes una entrevista ma√±ana a las {{hora}} para {{cargo}}. ¬°Te esperamos!', 1, 1);

-- Insertar reglas de notificaci√≥n por defecto
INSERT INTO WhatsApp_Notification_Rules (tenant_id, name, description, trigger_event, template_id, is_active) VALUES
(1, 'Notificaci√≥n de Postulaci√≥n', 'Notifica autom√°ticamente cuando un candidato se postula', 'candidate_postulated', 1, 1);

INSERT INTO WhatsApp_Notification_Rules (tenant_id, name, description, trigger_event, template_id, is_active) VALUES
(1, 'Notificaci√≥n de Entrevista', 'Notifica cuando se programa una entrevista', 'interview_scheduled', 2, 1);

INSERT INTO WhatsApp_Notification_Rules (tenant_id, name, description, trigger_event, template_id, is_active) VALUES
(1, 'Notificaci√≥n de Contrataci√≥n', 'Notifica cuando se contrata un candidato', 'candidate_hired', 3, 1);

INSERT INTO WhatsApp_Notification_Rules (tenant_id, name, description, trigger_event, template_id, is_active) VALUES
(1, 'Recordatorio de Entrevista', 'Env√≠a recordatorio 24h antes de la entrevista', 'interview_scheduled', 4, 1);

-- Insertar plantilla de WhatsApp legacy
INSERT INTO Whatsapp_Templates (id_template, nombre_plantilla, asunto, cuerpo_mensaje, tenant_id) 
VALUES (1, 'Notificaci√≥n de Postulaci√≥n', 'Postulaci√≥n Recibida', 'Hemos recibido tu postulaci√≥n. Te contactaremos pronto.', 1);

-- Insertar plantilla de email
INSERT INTO Email_Templates (id_template, nombre_plantilla, asunto, cuerpo_html, tenant_id) 
VALUES (1, 'Confirmaci√≥n de Postulaci√≥n', 'Postulaci√≥n Recibida', '<html><body><h2>Confirmaci√≥n de Postulaci√≥n</h2><p>Hemos recibido tu postulaci√≥n exitosamente.</p></body></html>', 1);

-- =====================================================
-- CREAR SECUENCIAS PARA IDS MANUALES (SI ES NECESARIO)
-- =====================================================

-- Crear secuencias para los IDs que se insertan manualmente
CREATE SEQUENCE seq_tenants START WITH 2;
CREATE SEQUENCE seq_roles START WITH 4;
CREATE SEQUENCE seq_users START WITH 3;
CREATE SEQUENCE seq_clientes START WITH 2;
CREATE SEQUENCE seq_vacantes START WITH 2;
CREATE SEQUENCE seq_afiliados START WITH 2;
CREATE SEQUENCE seq_whatsapp_templates START WITH 5;
CREATE SEQUENCE seq_whatsapp_rules START WITH 5;
CREATE SEQUENCE seq_tags START WITH 1;
CREATE SEQUENCE seq_whatsapp_templates_legacy START WITH 1;
CREATE SEQUENCE seq_email_templates START WITH 1;
CREATE SEQUENCE seq_chatbot_settings START WITH 1;
CREATE SEQUENCE seq_puntuaciones_candidato START WITH 1;
CREATE SEQUENCE seq_documentos START WITH 1;
CREATE SEQUENCE seq_useractivitylog START WITH 1;
CREATE SEQUENCE seq_errorlogs START WITH 1;
CREATE SEQUENCE seq_mensajes_contacto START WITH 1;
CREATE SEQUENCE seq_notifications START WITH 1;
CREATE SEQUENCE seq_posts START WITH 1;
CREATE SEQUENCE seq_interacciones START WITH 1;

-- =====================================================
-- COMENTARIOS FINALES
-- =====================================================

/*
ESQUEMA DE BASE DE DATOS ORACLE - CRM WHATSAPP MULTI-TENANT

Este esquema proporciona:
- Aislamiento completo por tenant
- Soporte para WhatsApp Business API y WhatsApp Web
- Gesti√≥n de candidatos, clientes y vacantes
- Sistema de entrevistas y contrataciones
- Calendario y recordatorios
- Sistema de plantillas y campa√±as de WhatsApp
- Notificaciones autom√°ticas
- Logs y auditor√≠a
- Optimizaci√≥n de rendimiento con √≠ndices

CARACTER√çSTICAS PRINCIPALES:
‚úÖ Multi-tenancy completo
‚úÖ Soporte dual (API + Web) para WhatsApp
‚úÖ Escalabilidad empresarial
‚úÖ Auditor√≠a y logs completos
‚úÖ Optimizaci√≥n de rendimiento
‚úÖ Integridad referencial
‚úÖ Triggers para actualizaci√≥n autom√°tica
‚úÖ Datos de ejemplo incluidos

TABLAS PRINCIPALES:
- Tenants: Gesti√≥n multi-tenant
- Users/Roles: Autenticaci√≥n y autorizaci√≥n (con id_cliente y fecha_eliminacion)
- Afiliados: Candidatos
- Clientes: Empresas
- Vacantes: Ofertas de trabajo (estados: Abierta, Cerrada, Pausada, Activa)
- Postulaciones: Aplicaciones de candidatos (con fecha_aplicacion)
- Entrevistas: Entrevistas programadas (con fecha_hora)
- Contratados: Contrataciones realizadas
- Tags/Afiliado_Tags/candidato_tags: Sistema de etiquetas para candidatos
- puntuaciones_candidato: Historial de puntuaciones
- documentos: Documentos adjuntos de candidatos
- interacciones: Interacciones con candidatos
- WhatsApp_*: Sistema completo de WhatsApp (nuevo y legacy)
- Email_Templates: Plantillas de email (con fecha_creacion)
- Chatbot_Settings: Configuraci√≥n del chatbot
- useractivitylog: Log de actividad de usuarios
- errorlogs: Log de errores del sistema
- mensajes_contacto: Mensajes del formulario de contacto
- notifications: Sistema de notificaciones
- posts: Sistema de blog/noticias
- calendar_*: Sistema de calendario

TABLAS WHATSAPP (34 tablas total):
- WhatsApp_Config: Configuraci√≥n por tenant
- WhatsApp_Conversations: Conversaciones
- WhatsApp_Messages: Mensajes
- WhatsApp_Templates: Plantillas (nuevo sistema)
- WhatsApp_Campaigns: Campa√±as masivas
- WhatsApp_Webhooks: Webhooks recibidos
- WhatsApp_Activity_Logs: Logs de actividad
- WhatsApp_Notification_Rules: Reglas autom√°ticas
- Whatsapp_Templates: Plantillas (sistema legacy)

COMPATIBILIDAD: Oracle Database 19c+
*/

COMMIT;
